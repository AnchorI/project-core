image: "node:18"

stages:
  - build
  - checks
  - deploy

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
  APP_NAME: evcar-node
  NODE_PORT: 8777

# checks stage
eslint:
  stage: checks
  script:
    - yarn install
    - ./node_modules/.bin/eslint ./src --ext .ts  --quiet
  dependencies:
    - deps:node
  cache:
    key: "backend-node"
    paths:
      - node_modules/
    policy: pull

typescript:
  stage: checks
  script:
    - yarn install
    - ./node_modules/.bin/tsc --project tsconfig.json --noEmit
  dependencies:
    - deps:node
  cache:
    key: "backend-node"
    paths:
      - node_modules/
    policy: pull

prettier:
  stage: checks
  script:
    - yarn install
    - ./node_modules/.bin/prettier -c "./src/**/*.ts"
  cache:
    key: "backend-node"
    paths:
      - node_modules/
    policy: pull


build:
  tags: [ deploy ]
  image: docker:git
  stage: build
  services:
    - docker:dind
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST .
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

deploy:
  image: alpine:latest
  stage: deploy
  tags:
    - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $TAG_COMMIT"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f $APP_NAME || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p $NODE_PORT:8777 --name $APP_NAME --restart always $TAG_COMMIT"
  environment:
    name: production
  only:
    - /^release.*$/
